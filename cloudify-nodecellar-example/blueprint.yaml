###########################################################
# This Blueprint installs the nodecellar application
# on an vcloud cloud environment.
###########################################################
 
tosca_definitions_version: cloudify_dsl_1_0
 
imports:
  - http://www.getcloudify.org/spec/cloudify/3.2m6/types.yaml
  - https://raw.githubusercontent.com/pacogomez/tosca-vcloud-plugin/1.2-build/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.2m6/plugin.yaml
  - types/nodecellar.yaml
 
 
 
#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################
 
inputs:
 
  catalog:
    description: >
      The vCloud catalog
    default: ''
 
  template:
    description: >
      The vCloud template
    default: ''
 
  agent_user:
    description: >
      User name used when SSH-ing into the started machine
    default: ubuntu
 
  management_network_name:
    description: >
      Name of the network that will be used for Cloudify management
    type: string
 
  vcloud_username:
    type: string
 
  vcloud_password:
    type: string
 
  vcloud_url:
    type: string
 
  vcloud_service:
    type: string
    default: ''
 
  vcloud_service_type:
    type: string
    default: 'subscription'
 
  vcloud_api_version:
    type: string
    default: '5.6'
 
  vcloud_vdc:
    type: string

  vcloud_region:
    type: string
    default: ''

  floating_ip_gateway:
    type: string
    
  manager_public_key:
    type: string
    default: ''
    
  server_name:
    type: string
    
  manager_private_key_path:
    type: string
    default: '/home/ubuntu/.ssh/id_rsa_manager'
    
  manager_server_user:
    type: string
    default: 'ubuntu'
 
node_types:
 
  ###########################################################
  # We define a type that inherits vcloud's default
  # server, and adds monitoring capabillities on top of it.
  ###########################################################
  nodecellar.nodes.Server:
    derived_from: cloudify.vcloud.nodes.Server
    properties:
      cloudify_agent:
        default:
          user: { get_input: agent_user }
          home_dir: /home/ubuntu
      server:
        default:
          catalog: { get_input: catalog }
          template: { get_input: template }
      management_network:
        default: { get_input: management_network_name }
 
 
  nodecellar.nodes.MonitoredServer:
    derived_from: cloudify.vcloud.nodes.Server
    properties:
      cloudify_agent:
        default:
          user: { get_input: agent_user }
          home_dir: /home/ubuntu
      server:
        default:
          catalog: { get_input: catalog }
          template: { get_input: template }
      management_network:
        default: { get_input: management_network_name }
 
    interfaces:
 
      ###########################################################
      # We are infact telling cloudify to install a diamond
      # monitoring agent on the server.
      #
      # (see https://github.com/BrightcoveOS/Diamond)
      ###########################################################
 
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
 
      ###########################################################
      # Adding some collectors. These collectors are necessary
      # for the Cloudify UI to display the deafult metrics.
      ###########################################################
 
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}
 
  vcloud_configuration:
    derived_from: cloudify.nodes.Root
    properties:
      vcloud_config: {}
 
 
node_templates:
    
  manager_keypair:
    type: cloudify.vcloud.nodes.KeyPair
    properties:
      private_key_path: { get_input: manager_private_key_path }
      public_key:
        key: { get_input: manager_public_key }
        user: { get_input: manager_server_user }
 
  vcloud_configuration:
    type: vcloud_configuration
    properties:
      vcloud_config:
        username: { get_input: vcloud_username }
        password: { get_input: vcloud_password }
        url: { get_input: vcloud_url }
        service: { get_input: vcloud_service }
        vdc: { get_input: vcloud_vdc }
        service_type: { get_input: vcloud_service_type }
        api_version: { get_input: vcloud_api_version }
        region: { get_input: vcloud_region }
 
  mongod_host:
    type: nodecellar.nodes.Server
    properties:
      server:
          catalog: { get_input: catalog }
          template: { get_input: template }
          guest_customization:
              post_script: 'echo ''dns-nameservers 8.8.8.8'' >> /etc/network/interfaces && ifdown eth0 && ifup eth0'
              public_keys:
                  - { get_property: [manager_keypair, public_key] }
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    relationships:
      - target: nodejs_host
        type: cloudify.relationships.depends_on
      - target: mongo_management_port
        type: cloudify.vcloud.server_connected_to_port
 
  nodejs_host:
    type: nodecellar.nodes.Server
    properties:
      server:
          catalog: { get_input: catalog }
          template: { get_input: template }
          guest_customization:
              post_script: 'echo ''dns-nameservers 8.8.8.8'' >> /etc/network/interfaces && ifdown eth0 && ifup eth0'
              public_keys:
                  - { get_property: [manager_keypair, public_key] }
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
    relationships:
 
      ###########################################################
      # Attaching a floating ip to the nodejs host
      ###########################################################

      - target: nodecellar_floatingip
        type: cloudify.vcloud.server_connected_to_floating_ip
      - target: nodecellar_management_port
        type: cloudify.vcloud.server_connected_to_port
 
  mongo_management_port:
    type: cloudify.vcloud.nodes.Port
    properties:
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
      port:
        network: { get_input: management_network_name }
        ip_allocation_mode: pool
        primary_interface: true
 
  nodecellar_management_port:
    type: cloudify.vcloud.nodes.Port
    properties:
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
      port:
        network: { get_input: management_network_name }
        ip_allocation_mode: pool
        primary_interface: true
 
  mongod:
    type: nodecellar.nodes.MongoDatabase
    properties:
      port: 27017
#################################################################################
#disabled monitoring
    interfaces:
      cloudify.interfaces.lifecycle:
 
        ###########################################################
        # The MongoDBCollector depends on a python library called
        # pymongo. We install this library in the 'configure'
        # lifecycle hook of this node.
        ###########################################################
 
         configure: scripts/mongo/install-pymongo.sh
 
      ###########################################################
      # Notice that this node defines an additional collector
      # to collect data on the MongoDB.
      ###########################################################
 
 #     cloudify.interfaces.monitoring:
 #         start:
 #           implementation: diamond.diamond_agent.tasks.add_collectors
 #           inputs:
 #             collectors_config:
 #               MongoDBCollector:
 #                 config:
 #                   hosts: "localhost:27017"
#######################################################################################
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host
 
  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host
 
  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    properties:
      port: 8080
    relationships:
 
      ################################
      # Setting the mongo connection
      ################################
 
      - type: node_connected_to_mongo
        target: mongod
 
      ################################
      # Setting the nodejs connection
      ################################
 
      - type: node_contained_in_nodejs
        target: nodejs
 
  ###########################################################
  # A floating ip to be attached to the nodejs host, since
  # eventually we want to be able to access it
  # from any machine, on any network.
  ###########################################################
 
  nodecellar_floatingip:
    type: cloudify.vcloud.nodes.FloatingIP
    properties:
      vcloud_config: { get_property: [vcloud_configuration, vcloud_config] }
      floatingip:
        edge_gateway: { get_input: floating_ip_gateway }

 
###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################
 
outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ nodecellar_floatingip, public_ip ] }
      port: { get_property: [ nodecellar, port ] }
